"""This is the implementation of the central directory header

This implements the central directory call and methods
"""


class CentralDirectoryHeader:
    """ A class used to represent a Central Director Header
    """

    def __init__(self, original_header) -> None:
        """

        Args:
            original_header (str): The original version of this header
        """
        # print(f'makeing a new header {original_header}')
        self.original_header = original_header
        # self.file_name_length = _get_header_field(original_header, )

        # centralDirectoryHeaderSig = original_header[0*2:4*2]
        # # print(centralDirectoryHeaderSig)
        # self.file_name_length = original_header[28*2:30*2]
        # # print(self.file_name_length)
        # self.file_name_length = _hex_to_int(self.file_name_length)
        # # print(self.file_name_length)
        # # print(_hex_to_int(_get_header_field(original_header, 28, 2)))
        # self.local_file_header_relative_offset = _hex_to_int(
        #     original_header[42*2:46*2])
        # # print(self.local_file_header_relative_offset)

        # # print(_hex_to_int(self.local_file_header_relative_offset))
        # self.file_name = original_header[46*2:46*2+self.file_name_length*2]
        # print(_hex_to_str(self.file_name))
        # print(_hex_to_str(_get_header_field(
        # original_header, 46, self.file_name_length)))

        # print(int(self.file_name_length, 16))
        # print(bytearray.fromhex(self.file_name_length))
        # print(int('0009', 16))
        # print(int('0x1e000000', 0))
        # print(int('0000001e', 16))
        # print(int('beef', 16))


def _hex_to_int(hex):
    """Converts hex to int

    Args:
        hex (str): string representation of hex value

    Returns:
        int: the value of the hex in int format
    """
    hex_bytes = bytearray.fromhex(hex)
    hex_bytes.reverse()
    hex_str = ''.join(format(x, '02x') for x in hex_bytes)
    num = int(hex_str, 16)
    return num


def _hex_to_str(hex) -> str:
    """Converts the hex to he ascii values of the bytes

    Args:
        hex (str): The hex value to be converted in string format 

    Returns:
        str: The ascii representation of the hex
    """
    return bytearray.fromhex(hex).decode()


def _get_header_field(header, start_offset, length_in_bytes) -> str:
    """Gets a field from the header

    Gets a section of the bytes from the header that represents a field

    Args:
        header (str): The header containing the fields in bytes
        start_offset (int): The offset from th start of the header to the
                            start of the field
        length_in_bytes (int): Length of the field in bytes

    Returns:
        str: The field selected from the header
    """
    # have to multiple by to because one byte is 2 chars
    return header[start_offset*2:start_offset*2 + length_in_bytes*2]
