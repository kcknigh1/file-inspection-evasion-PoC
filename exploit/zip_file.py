"""Implements the file structure of a zip file"""

# from exploit import central_directory_header, local_file_header
from exploit.central_directory_header import CentralDirectoryHeader
from .end_central_dir_header import EndCentralDirectoryHeader
from .utils import get_header_field


class Zip_file:
    """Class that represents the zip file structure"""

    def __init__(self, file_hex) -> None:
        """Splits the provied file_hex into the zip file structure

        Args:
            file_hex (str): The string representation of the files hex
        """
        self._file_hex = file_hex
        self._local_file_headers, self._central_dir, self._end_central_dir = _split_zip_file_into_sections(
            file_hex)
        self.central_directory_list = self._split_central_dir()
        # for x in self.central_directory_list:
        # print(x.get_header())
        # print(self.central_directory_list)

    def get_local_file_headers(self):
        return self._local_file_headers

    def get_central_dir_hex(self):
        central_dir_hex = ''
        for header in self.central_directory_list:
            central_dir_hex = f'{central_dir_hex}{header.get_header()}'

        # print(central_dir_hex)
        return central_dir_hex

    def get_end_central_dir(self):
        return self._end_central_dir

    def get_central_dir_list(self):
        return self.central_directory_list

    def _split_central_dir(self):
        split_central_directory_headers = self._central_dir.split('504b0102')
        central_directory_list = []
        for header in split_central_directory_headers[1:]:
            # print(f'central_directory_header: 504b0102{header}')
            central_directory_list.append(
                CentralDirectoryHeader(f'504b0102{header}'))

        return central_directory_list

    def prepend_file(self, file_hex):
        new_file_byte_length = int(len(file_hex)/2)
        # print(new_file_byte_length)
        self._local_file_headers = f'{file_hex}{self._local_file_headers}'
        for header in self.get_central_dir_list():
            # print(f'old offset: {header.get_relative_local_header_offset()}')
            header.shift_relative_local_header_offset(new_file_byte_length)
            # print(f'new offset: {header.get_relative_local_header_offset()}')

        # print(
            # f'old dir start: {self._end_central_dir.get_offset_start_central_dir_from_start()}')
        self._end_central_dir.shift_start_central_dir_start_offset(
            new_file_byte_length)
        # print(
        # f'new dir start: {self._end_central_dir.get_offset_start_central_dir_from_start()}')

#         split_central_directory_headers = split_end_central_directory_header[0].split(
# #     # '504b0102', 1)
# #     # central_directory = f'504b0102{split_central_directory_headers[-1]}'
# #     # for x in split_central_directory_headers[1:]:
# #     # print(f'central_directory_header: 504b0102{central_directory}')
# #     # central_directory_headers.append(
# #     # CentralDirectoryHeader(f'504b0102{x}'))

#     # print(central_directory_headers)
    # TODO split on central dir magic num then split [0] on other header magic num for all the parts
# TODO add method to locate centrial directory and split it into the files that it contains

# TODO check format for return tuple in doc


def _split_zip_file_into_sections(file_hex):
    """Splits the zip file_hex into the central directory other headers

    Args:
        file_hex (str): The hex code of the file to split

    Returns:
        tuple: (local_files (srt): The local files section of the zip,
                central_directory (str): The central directory of the zip
                end_central_directory_header (str): The end central directory 
                    header)
    """
    split_end_central_directory_header = file_hex.split('504b0506')
    end_central_directory_header = EndCentralDirectoryHeader(
        f'504b0506{split_end_central_directory_header[-1]}')
    # print(f'end_central_directory_header: {end_central_directory_header}')

    # TODO handle not a zip case
    # print("not a zip file")
    # return

    # TODO add central directory headers to the list
    central_directory = get_header_field(
        file_hex, end_central_directory_header.get_offset_start_central_dir_from_start(),
        end_central_directory_header.get_size_central_dir_bytes())
    # split_central_directory_headers = split_end_central_directory_header[0].split(
    # '504b0102', 1)
    # central_directory = f'504b0102{split_central_directory_headers[-1]}'
    # for x in split_central_directory_headers[1:]:
    # print(f'central_directory_header: 504b0102{central_directory}')
    # central_directory_headers.append(
    # CentralDirectoryHeader(f'504b0102{x}'))

    # print(central_directory_headers)

    # split_local_file_header = split_central_directory_headers[0].split(
    # '504b0304')

    # TODO add stuff for local file header
    local_files = file_hex[:end_central_directory_header.get_offset_start_central_dir_from_start()*2]
    # split_central_directory_headers[0]
    # for x in split_local_file_header[1:]:
    #   print(f'local_file_header: 504b0304{x}')

    #   print(file_hex.split("504b0102", 1))
    # central_directory = None
    # other_contents = None
    return (local_files, central_directory, end_central_directory_header)
